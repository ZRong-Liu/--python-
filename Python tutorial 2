利用推导式创建列表

	x = [i for i in range(10, 1, -2)]
	print(x, type(x))
	# [10, 8, 6, 4, 2] <class 'list'>
注意：由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的[1,2,3]，也有3个指针和3个整数对象。
x = [a] * 4操作中，只是创建4个指向list的引用，所以一旦a改变，x中4个a也会随之改变。

【例子】
	x = [[0] * 3] * 4
	print(x, type(x))
	# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] <class 'list'>

	x[0][0] = 1
	print(x, type(x))
	# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] <class 'list'>

	a = [0] * 3
	x = [a] * 4
	print(x, type(x))
	# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] <class 'list'>

	x[0][0] = 1
	print(x, type(x))
	# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] <class 'list'>

 
 创建一个混合列表
 	【例子】
  		mix = [1, 'lsgo', 3.14, [1, 2, 3]]
		print(mix, type(mix))  
		# [1, 'lsgo', 3.14, [1, 2, 3]] <class 'list'>
 
 创建一个空列表
 	【例子】
 		empty = []
		print(empty, type(empty))  # [] <class 'list'>
		
 列表不像元组，列表内容可更改 (mutable)，因此附加 (append, extend)、插入 (insert)、删除 (remove, pop) 这些操作都可以用在它身上。
 
 
 向列表中添加元素
 list.append(obj) 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。
	 x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	x.append(['Thursday', 'Sunday'])
	print(x)  
	# ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', ['Thursday', 'Sunday']]

	print(len(x))  # 6
 此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意append()和extend()的区别。
 
 list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
	 x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	x.extend(['Thursday', 'Sunday'])
	print(x)  
	# ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Thursday', 'Sunday']

	print(len(x))  # 7

 严格来说 append 是追加，把一个东西整体添加在列表后，而 extend 是扩展，把一个东西里的所有元素添加在列表后。
 
 list.insert(index, obj) 在编号 index 位置插入 obj。
	x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	x.insert(2, 'Sunday')
	print(x)
	# ['Monday', 'Tuesday', 'Sunday', 'Wednesday', 'Thursday', 'Friday']

	print(len(x))  # 6
 
 4. 删除列表中的元素¶
 list.remove(obj) 移除列表中某个值的第一个匹配项
	x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	x.remove('Monday')
	print(x)  # ['Tuesday', 'Wednesday', 'Thursday', 'Friday']
 
 list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
	x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	y = x.pop()
	print(y)  # Friday

	y = x.pop(0)
	print(y)  # Monday

	y = x.pop(-2)
	print(y)  # Wednesday
	print(x)  # ['Tuesday', 'Thursday']
 
 remove 和 pop 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。
 
 del var1[, var2 ……] 删除单个或多个对象
	x = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	del x[0:2]
	print(x)  # ['Wednesday', 'Thursday', 'Friday']
	
如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()。
 
 5. 获取列表中的元素
 切片的通用写法是 start : stop : step
 以具体的 step 从编号 start 往编号 stop 切片。注意最后把 step 设为 -1，相当于将列表反向排列
	week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
	print(week[1:4:2])  # ['Tuesday', 'Thursday']
	print(week[:4:2])  # ['Monday', 'Wednesday']
	print(week[1::2])  # ['Tuesday', 'Thursday']
	print(week[::-1])  
	# ['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']
  '''
  	.sort()  #给列表中的元素排序
  '''
    浅拷贝与深拷贝
	list1 = [123, 456, 789, 213]
	list2 = list1     #浅拷贝
	list3 = list1[:]  

	print(list2)  # [123, 456, 789, 213]
	print(list3)  # [123, 456, 789, 213]
	list1.sort()  #给列表中的元素排序
	print(list1)  # [123, 213, 456, 789] 
	print(list2)  # [123, 213, 456, 789] 
	print(list3)  # [123, 456, 789, 213]

	list1 = [[123, 456], [789, 213]]
	list2 = list1
	list3 = list1[:]
	print(list2)  # [[123, 456], [789, 213]]
	print(list3)  # [[123, 456], [789, 213]]
	list1[0][0] = 111
	print(list2)  # [[111, 456], [789, 213]]
	print(list3)  # [[111, 456], [789, 213]]
 6. 列表的常用操作符
	等号操作符：==
	连接操作符 +
	重复操作符 *
	成员关系操作符 in、not in
	「等号 ==」，只有成员、成员位置都相同时才返回True。

	列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。
   前面三种方法（append, extend, insert）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 
   而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。
 
 7. 列表的其它方法
   list.reverse() 反向列表中元素
 
   list.count(obj) 统计某个元素在列表中出现的次数
   
   list.index(x[, start[, end]]) 从列表中找出某个值第一个匹配项的索引位置
	list1 = [123, 456] * 5
	print(list1.index(123))  # 0
	print(list1.index(123, 1))  # 2
	print(list1.index(123, 3, 7))  # 4   3和7代表开始索引位置和末尾索引位置
	
   list.sort(key=None, reverse=False) 对原列表进行排序。
	key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
	reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。
	该方法没有返回值，但是会对列表的对象进行排序。
 
 
 
 
 元组（tuple）
 「元组」定义语法为：(元素1, 元素2, ..., 元素n)
	 Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。
	 元组使用小括号，列表使用方括号。
	 元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
